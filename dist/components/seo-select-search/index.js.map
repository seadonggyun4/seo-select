{"version":3,"file":"index.js","sources":["../../../src/utils/search.ts","../../../src/components/seo-select-search/index.ts"],"sourcesContent":["/**\n * 다국어 문자열 검색을 위한 통합 함수\n * - 한글: 초성 검색 지원\n * - 영어: 대소문자 무시\n * - 일본어: 히라가나/가타카나 변환 및 로마지 지원\n * - 중국어: 간체/번체 변환 및 병음 지원\n */\n\nconst HIRAGANA_TO_KATAKANA: Record<string, string> = {\n  'あ': 'ア', 'い': 'イ', 'う': 'ウ', 'え': 'エ', 'お': 'オ',\n  'か': 'カ', 'き': 'キ', 'く': 'ク', 'け': 'ケ', 'こ': 'コ',\n  'が': 'ガ', 'ぎ': 'ギ', 'ぐ': 'グ', 'げ': 'ゲ', 'ご': 'ゴ',\n  'さ': 'サ', 'し': 'シ', 'す': 'ス', 'せ': 'セ', 'そ': 'ソ',\n  'ざ': 'ザ', 'じ': 'ジ', 'ず': 'ズ', 'ぜ': 'ゼ', 'ぞ': 'ゾ',\n  'た': 'タ', 'ち': 'チ', 'つ': 'ツ', 'て': 'テ', 'と': 'ト',\n  'だ': 'ダ', 'ぢ': 'ヂ', 'づ': 'ヅ', 'で': 'デ', 'ど': 'ド',\n  'な': 'ナ', 'に': 'ニ', 'ぬ': 'ヌ', 'ね': 'ネ', 'の': 'ノ',\n  'は': 'ハ', 'ひ': 'ヒ', 'ふ': 'フ', 'へ': 'ヘ', 'ほ': 'ホ',\n  'ば': 'バ', 'び': 'ビ', 'ぶ': 'ブ', 'べ': 'ベ', 'ぼ': 'ボ',\n  'ぱ': 'パ', 'ぴ': 'ピ', 'ぷ': 'プ', 'ぺ': 'ペ', 'ぽ': 'ポ',\n  'ま': 'マ', 'み': 'ミ', 'む': 'ム', 'め': 'メ', 'も': 'モ',\n  'や': 'ヤ', 'ゆ': 'ユ', 'よ': 'ヨ',\n  'ら': 'ラ', 'り': 'リ', 'る': 'ル', 'れ': 'レ', 'ろ': 'ロ',\n  'わ': 'ワ', 'ゐ': 'ヰ', 'ゑ': 'ヱ', 'を': 'ヲ', 'ん': 'ン',\n  'ー': 'ー', 'っ': 'ッ', 'ゃ': 'ャ', 'ゅ': 'ュ', 'ょ': 'ョ',\n  'ぁ': 'ァ', 'ぃ': 'ィ', 'ぅ': 'ゥ', 'ぇ': 'ェ', 'ぉ': 'ォ'\n};\n\nconst KATAKANA_TO_HIRAGANA: Record<string, string> = {};\nObject.entries(HIRAGANA_TO_KATAKANA).forEach(([hiragana, katakana]) => {\n  KATAKANA_TO_HIRAGANA[katakana] = hiragana;\n});\n\nconst ROMAJI_TO_HIRAGANA: Record<string, string> = {\n  'a': 'あ', 'i': 'い', 'u': 'う', 'e': 'え', 'o': 'お',\n  'ka': 'か', 'ki': 'き', 'ku': 'く', 'ke': 'け', 'ko': 'こ',\n  'ga': 'が', 'gi': 'ぎ', 'gu': 'ぐ', 'ge': 'げ', 'go': 'ご',\n  'sa': 'さ', 'shi': 'し', 'su': 'す', 'se': 'せ', 'so': 'そ',\n  'za': 'ざ', 'ji': 'じ', 'zu': 'ず', 'ze': 'ぜ', 'zo': 'ぞ',\n  'ta': 'た', 'chi': 'ち', 'tsu': 'つ', 'te': 'て', 'to': 'と',\n  'da': 'だ', 'di': 'ぢ', 'du': 'づ', 'de': 'で', 'do': 'ど',\n  'na': 'な', 'ni': 'に', 'nu': 'ぬ', 'ne': 'ね', 'no': 'の',\n  'ha': 'は', 'hi': 'ひ', 'fu': 'ふ', 'he': 'へ', 'ho': 'ほ',\n  'ba': 'ば', 'bi': 'び', 'bu': 'ぶ', 'be': 'べ', 'bo': 'ぼ',\n  'pa': 'ぱ', 'pi': 'ぴ', 'pu': 'ぷ', 'pe': 'ぺ', 'po': 'ぽ',\n  'ma': 'ま', 'mi': 'み', 'mu': 'む', 'me': 'め', 'mo': 'も',\n  'ya': 'や', 'yu': 'ゆ', 'yo': 'よ',\n  'ra': 'ら', 'ri': 'り', 'ru': 'る', 're': 'れ', 'ro': 'ろ',\n  'wa': 'わ', 'wo': 'を', 'n': 'ん'\n};\n\nconst SIMPLIFIED_TO_TRADITIONAL: Record<string, string> = {\n  '爱': '愛', '国': '國', '学': '學', '会': '會', '说': '說',\n  '时': '時', '实': '實', '现': '現', '发': '發', '来': '來',\n  '这': '這', '那': '那', '里': '裡', '为': '為', '什': '什',\n  '么': '麼', '样': '樣', '电': '電', '话': '話', '网': '網',\n  '页': '頁', '应': '應', '该': '該', '让': '讓', '过': '過',\n  '关': '關', '机': '機', '构': '構', '经': '經', '营': '營',\n  '业': '業', '务': '務', '员': '員', '户': '戶', '门': '門',\n  '东': '東', '西': '西', '南': '南', '北': '北', '中': '中',\n  '华': '華', '民': '民', '共': '共', '和': '和', '人': '人'\n};\n\nconst TRADITIONAL_TO_SIMPLIFIED: Record<string, string> = {};\nObject.entries(SIMPLIFIED_TO_TRADITIONAL).forEach(([simplified, traditional]) => {\n  TRADITIONAL_TO_SIMPLIFIED[traditional] = simplified;\n});\n\nconst CHINESE_TO_PINYIN: Record<string, string> = {\n  '你': 'ni', '好': 'hao', '我': 'wo', '是': 'shi', '的': 'de',\n  '在': 'zai', '有': 'you', '不': 'bu', '人': 'ren', '了': 'le',\n  '中': 'zhong', '国': 'guo', '一': 'yi', '个': 'ge', '上': 'shang',\n  '也': 'ye', '很': 'hen', '到': 'dao', '说': 'shuo', '要': 'yao',\n  '去': 'qu', '就': 'jiu', '得': 'de', '可': 'ke', '以': 'yi',\n  '还': 'hai', '时': 'shi', '候': 'hou', '会': 'hui', '这': 'zhe',\n  '那': 'na', '什': 'shen', '么': 'me', '没': 'mei', '看': 'kan',\n  '来': 'lai', '对': 'dui', '里': 'li', '后': 'hou', '自': 'zi',\n  '己': 'ji', '年': 'nian', '大': 'da', '小': 'xiao', '多': 'duo'\n};\n\n/**\n * 한글 초성 추출 (기존 함수 유지)\n */\nconst getKoreanChosung = (str: string): string => {\n  const HANGUL_START = 0xac00;\n  const HANGUL_END = 0xd7a3;\n  const CHOSUNG_LIST: readonly string[] = [\n    'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', \n    'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\n  ] as const;\n  \n  const CHOSUNG_UNICODE: readonly number[] = CHOSUNG_LIST.map(ch => ch.charCodeAt(0));\n\n  let result = '';\n\n  for (const char of str) {\n    const code = char.charCodeAt(0);\n\n    if (code >= HANGUL_START && code <= HANGUL_END) {\n      const offset = code - HANGUL_START;\n      const chosungIndex = Math.floor(offset / (21 * 28));\n      result += CHOSUNG_LIST[chosungIndex];\n    }\n    else if (CHOSUNG_UNICODE.includes(code)) {\n      result += char;\n    }\n    else {\n      result += char;\n    }\n  }\n\n  return result;\n};\n\n/**\n * 일본어 정규화 (히라가나/가타카나 통합)\n */\nconst normalizeJapanese = (str: string): string => {\n  return str\n    .split('')\n    .map(char => {\n      if (KATAKANA_TO_HIRAGANA[char]) {\n        return KATAKANA_TO_HIRAGANA[char];\n      }\n      return char;\n    })\n    .join('');\n};\n\n/**\n * 중국어 정규화 (간체/번체 통합)\n */\nconst normalizeChinese = (str: string): string => {\n  return str\n    .split('')\n    .map(char => {\n      if (TRADITIONAL_TO_SIMPLIFIED[char]) {\n        return TRADITIONAL_TO_SIMPLIFIED[char];\n      }\n      return char;\n    })\n    .join('');\n};\n\n/**\n * 로마자를 히라가나로 변환 (부분 매칭)\n */\nconst romajiToHiragana = (romaji: string): string => {\n  let result = '';\n  let i = 0;\n  \n  while (i < romaji.length) {\n    let found = false;\n    \n    for (let len = 3; len >= 1; len--) {\n      if (i + len <= romaji.length) {\n        const substr = romaji.substring(i, i + len);\n        if (ROMAJI_TO_HIRAGANA[substr]) {\n          result += ROMAJI_TO_HIRAGANA[substr];\n          i += len;\n          found = true;\n          break;\n        }\n      }\n    }\n    \n    if (!found) {\n      result += romaji[i];\n      i++;\n    }\n  }\n  \n  return result;\n};\n\n/**\n * 중국어를 병음으로 변환\n */\nconst chineseToPinyin = (str: string): string => {\n  return str\n    .split('')\n    .map(char => CHINESE_TO_PINYIN[char] || char)\n    .join('');\n};\n\n/**\n * 언어 감지 함수\n */\nconst detectLanguage = (str: string): 'ko' | 'ja' | 'zh' | 'en' | 'mixed' => {\n  const koreanCount = (str.match(/[\\u3131-\\u3163\\uac00-\\ud7a3]/g) || []).length;\n  const japaneseCount = (str.match(/[\\u3040-\\u309f\\u30a0-\\u30ff]/g) || []).length;\n  const chineseCount = (str.match(/[\\u4e00-\\u9fff]/g) || []).length;\n  const englishCount = (str.match(/[a-zA-Z]/g) || []).length;\n  \n  const total = koreanCount + japaneseCount + chineseCount + englishCount;\n  \n  if (total === 0) return 'en';\n  \n  if (koreanCount / total > 0.5) return 'ko';\n  if (japaneseCount / total > 0.5) return 'ja';\n  if (chineseCount / total > 0.5) return 'zh';\n  if (englishCount / total > 0.5) return 'en';\n  \n  return 'mixed';\n};\n\n/**\n * 다국어 검색을 위한 통합 정규화 함수\n */\nexport const getChosungAll = (str: string): string => {\n  const cleanStr = str.toLowerCase().replace(/\\s+/g, '');\n  \n  let result = '';\n  \n  for (const char of cleanStr) {\n    const code = char.charCodeAt(0);\n    \n    // 숫자는 그대로 유지\n    if (/[0-9]/.test(char)) {\n      result += char;\n      continue;\n    }\n    \n    // 알파벳은 대문자로 변환\n    if (/[a-zA-Z]/.test(char)) {\n      result += char.toUpperCase();\n      continue;\n    }\n    \n    // 한글 처리\n    if (code >= 0x3131 && code <= 0x3163 || code >= 0xac00 && code <= 0xd7a3) {\n      result += getKoreanChosung(char);\n      continue;\n    }\n    \n    // 일본어 처리 (히라가나/가타카나)\n    if ((code >= 0x3040 && code <= 0x309f) || (code >= 0x30a0 && code <= 0x30ff)) {\n      result += normalizeJapanese(char);\n      continue;\n    }\n    \n    // 중국어 처리 (한자)\n    if (code >= 0x4e00 && code <= 0x9fff) {\n      result += normalizeChinese(char);\n      continue;\n    }\n    \n    // 기타 문자는 그대로 유지\n    result += char;\n  }\n  \n  return result;\n};\n\n/**\n * 고급 다국어 검색 함수\n * 검색어와 대상 텍스트 모두 여러 언어로 처리\n */\nexport const createMultilingualSearchPattern = (searchText: string): RegExp[] => {\n  const normalizedSearch = getChosungAll(searchText);\n  const language = detectLanguage(searchText);\n  const patterns: RegExp[] = [];\n  \n  // 기본 패턴 (초성/정규화된 텍스트)\n  const basicPattern = normalizedSearch.split('').join('.*');\n  patterns.push(new RegExp(basicPattern, 'i'));\n  \n  // 일본어인 경우 로마자 검색도 지원\n  if (language === 'ja' || language === 'mixed') {\n    if (/[a-zA-Z]/.test(searchText)) {\n      const hiraganaFromRomaji = romajiToHiragana(searchText.toLowerCase());\n      const katakanaFromRomaji = hiraganaFromRomaji\n        .split('')\n        .map(char => HIRAGANA_TO_KATAKANA[char] || char)\n        .join('');\n      \n      if (hiraganaFromRomaji !== searchText.toLowerCase()) {\n        patterns.push(new RegExp(hiraganaFromRomaji.split('').join('.*'), 'i'));\n        patterns.push(new RegExp(katakanaFromRomaji.split('').join('.*'), 'i'));\n      }\n    }\n  }\n  \n  // 중국어인 경우 병음 검색도 지원\n  if (language === 'zh' || language === 'mixed') {\n    if (/[a-zA-Z]/.test(searchText)) {\n      // 병음으로 검색하는 경우, 중국어 텍스트를 병음으로 변환하여 비교해야 함\n      // 이는 검색 대상 텍스트에서 처리됨\n    }\n  }\n  \n  return patterns;\n};\n\n/**\n * 다국어 텍스트 매칭 함수\n */\nexport const isMultilingualMatch = (searchText: string, targetText: string): boolean => {\n  const patterns = createMultilingualSearchPattern(searchText);\n  const normalizedTarget = getChosungAll(targetText);\n  const language = detectLanguage(targetText);\n  \n  // 기본 매칭\n  for (const pattern of patterns) {\n    if (pattern.test(normalizedTarget)) {\n      return true;\n    }\n  }\n  \n  // 중국어 대상 텍스트에 대한 병음 매칭\n  if (language === 'zh' || language === 'mixed') {\n    const pinyinTarget = chineseToPinyin(targetText);\n    for (const pattern of patterns) {\n      if (pattern.test(pinyinTarget)) {\n        return true;\n      }\n    }\n  }\n  \n  // 일본어 대상 텍스트에 대한 추가 매칭\n  if (language === 'ja' || language === 'mixed') {\n    const hiraganaTarget = normalizeJapanese(targetText);\n    for (const pattern of patterns) {\n      if (pattern.test(hiraganaTarget)) {\n        return true;\n      }\n    }\n  }\n  \n  return false;\n};","import { html } from 'lit';\nimport { isMultilingualMatch } from '../../utils/search.js';\nimport { SeoSelect } from '../seo-select/index.js';\nimport {\n  SupportedLanguage,\n  SelectTheme,\n  SearchLocalizedTexts,\n  SEARCH_LOCALIZED_TEXTS,\n  CSS_CLASSES,\n  ICONS,\n  EVENT_NAMES\n} from '../../constants/constants.js';\n\nimport {\n  triggerSelectEvent,\n  triggerDeselectEvent,\n  triggerResetEvent,\n  triggerChangeEvent,\n  triggerOpenEvent,\n  SeoSelectEventListener\n} from '../../event/index.js';\n\ninterface OptionItem {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\ninterface VirtualSelectOption {\n  value: string;\n  label: string;\n}\n\n// 글로벌 타입 확장 - SeoSelectSearch도 동일한 이벤트 사용\ndeclare global {\n  interface HTMLElementEventMap {\n    [EVENT_NAMES.SELECT]: import('../../event/SeoSelectEvent.js').SeoSelectEvent;\n    [EVENT_NAMES.DESELECT]: import('../../event/SeoSelectEvent.js').SeoDeselectEvent;\n    [EVENT_NAMES.RESET]: import('../../event/SeoSelectEvent.js').SeoResetEvent;\n    [EVENT_NAMES.CHANGE]: import('../../event/SeoSelectEvent.js').SeoChangeEvent;\n    [EVENT_NAMES.SELECT_OPEN]: import('../../event/SeoSelectEvent.js').SeoOpenEvent;\n  }\n}\n\nexport class SeoSelectSearch extends SeoSelect {\n  static get properties() {\n    return {\n      ...super.properties,\n      _searchText: { type: String },\n      _noMatchVisible: { type: Boolean },\n      theme: { type: String },\n      dark: { type: Boolean },\n      searchTexts: { type: Object },\n    };\n  }\n\n  declare _searchText: string;\n  declare _noMatchVisible: boolean;\n  declare theme: SelectTheme;\n  declare dark: boolean;\n  declare searchTexts: Partial<SearchLocalizedTexts>;\n\n  constructor() {\n    super();\n    this._searchText = '';\n    this._noMatchVisible = false;\n    this.theme = 'float';\n    this.dark = false;\n    this.searchTexts = {};\n  }\n\n  /**\n   * @deprecated 표준 addEventListener를 사용하세요\n   */\n  public override addSeoSelectEventListener<T extends keyof HTMLElementEventMap>(\n    type: T,\n    listener: SeoSelectEventListener<T>,\n    options?: AddEventListenerOptions\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`addSeoSelectEventListener is deprecated. Use standard addEventListener instead:\nBefore: searchSelect.addSeoSelectEventListener('${type}', handler);\nAfter:  searchSelect.addEventListener('${type}', handler);`);\n    }\n    this.addEventListener(type, listener as EventListener, options);\n  }\n\n  /**\n   * @deprecated 표준 removeEventListener를 사용하세요\n   */\n  public override removeSeoSelectEventListener<T extends keyof HTMLElementEventMap>(\n    type: T,\n    listener: SeoSelectEventListener<T>,\n    options?: EventListenerOptions\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`removeSeoSelectEventListener is deprecated. Use standard removeEventListener instead:\nBefore: searchSelect.removeSeoSelectEventListener('${type}', handler);\nAfter:  searchSelect.removeEventListener('${type}', handler);`);\n    }\n    this.removeEventListener(type, listener as EventListener, options);\n  }\n\n  // 타입 안전한 이벤트 리스너 헬퍼 메서드들 (필수)\n  \n  /**\n   * 선택 이벤트 리스너 추가 (타입 안전)\n   * @example\n   * searchSelect.onSelect((event) => {\n   *   console.log('Selected:', event.label, event.value);\n   * });\n   */\n  public override onSelect(handler: (event: HTMLElementEventMap[typeof EVENT_NAMES.SELECT]) => void): void {\n    this.addEventListener(EVENT_NAMES.SELECT, handler as EventListener);\n  }\n\n  /**\n   * 선택 해제 이벤트 리스너 추가 (타입 안전)\n   * @example\n   * searchSelect.onDeselect((event) => {\n   *   console.log('Deselected:', event.label, event.value);\n   * });\n   */\n  public override onDeselect(handler: (event: HTMLElementEventMap[typeof EVENT_NAMES.DESELECT]) => void): void {\n    this.addEventListener(EVENT_NAMES.DESELECT, handler as EventListener);\n  }\n\n  /**\n   * 리셋 이벤트 리스너 추가 (타입 안전)\n   * @example\n   * searchSelect.onReset((event) => {\n   *   if (event.values && event.labels) {\n   *     console.log('Reset multiple:', event.values, event.labels);\n   *   } else {\n   *     console.log('Reset single:', event.value, event.label);\n   *   }\n   * });\n   */\n  public override onReset(handler: (event: HTMLElementEventMap[typeof EVENT_NAMES.RESET]) => void): void {\n    this.addEventListener(EVENT_NAMES.RESET, handler as EventListener);\n  }\n\n  /**\n   * 변경 이벤트 리스너 추가 (타입 안전)\n   * @example\n   * searchSelect.onChange((event) => {\n   *   console.log('Value changed');\n   * });\n   */\n  public override onChange(handler: (event: HTMLElementEventMap[typeof EVENT_NAMES.CHANGE]) => void): void {\n    this.addEventListener(EVENT_NAMES.CHANGE, handler as EventListener);\n  }\n\n  /**\n   * 검색 텍스트 변경 이벤트 리스너 추가 (검색 컴포넌트 전용)\n   * @example\n   * searchSelect.onSearchChange((searchText) => {\n   *   console.log('Search text changed:', searchText);\n   * });\n   */\n  public onSearchChange(handler: (searchText: string) => void): void {\n    // 내부적으로 input 이벤트를 처리하여 검색 텍스트 변경을 감지\n    this.addEventListener('search-text-change', ((event: CustomEvent) => {\n      handler(event.detail.searchText);\n    }) as EventListener);\n  }\n\n  /**\n   * 검색 결과 필터링 이벤트 리스너 추가 (검색 컴포넌트 전용)\n   * @example\n   * searchSelect.onSearchFilter((filteredOptions) => {\n   *   console.log('Filtered options:', filteredOptions);\n   * });\n   */\n  public onSearchFilter(handler: (filteredOptions: VirtualSelectOption[]) => void): void {\n    this.addEventListener('search-filter', ((event: CustomEvent) => {\n      handler(event.detail.filteredOptions);\n    }) as EventListener);\n  }\n\n  // 검색 관련 다국어 텍스트를 가져오고 커스텀 텍스트로 오버라이드하는 헬퍼 메서드\n  private getSearchLocalizedText(): SearchLocalizedTexts {\n    const baseTexts = SEARCH_LOCALIZED_TEXTS[this.language] || SEARCH_LOCALIZED_TEXTS.en;\n    return {\n      ...baseTexts,\n      ...this.searchTexts\n    };\n  }\n\n  updated(changed: Map<string, unknown>): void {\n    super.updated?.(changed);\n    if (changed.has('optionItems') || changed.has('_searchText') || changed.has('language') || changed.has('searchTexts')) {\n      this._applyFilteredOptions();\n    }\n  }\n\n  private getSearchIcon() {\n    return ICONS.SEARCH();\n  }\n\n  // 검색 기능이 있는 드롭다운 렌더링\n  private renderSearchDropdown() {\n    const searchTexts = this.getSearchLocalizedText();\n    const hasOptions = this.getAllOptionData().length > 0;\n    const showNoData = this.multiple && !this._isLoading && !hasOptions;\n    const effectiveWidth = this.getEffectiveWidth(); // 부모 클래스의 public 메서드 사용\n\n    return html`\n      <div class=\"${CSS_CLASSES.LISTBOX} ${this.open ? '' : CSS_CLASSES.HIDDEN}\" style=\"width: ${effectiveWidth};\">\n        <div class=\"${CSS_CLASSES.SEARCH_INPUT}\">\n          <span class=\"${CSS_CLASSES.SEARCH_ICON}\" aria-hidden=\"true\">${this.getSearchIcon()}</span>\n          <input\n            type=\"text\"\n            placeholder=\"${searchTexts.searchPlaceholder}\"\n            .value=${this._searchText}\n            @input=${this._handleSearchInput}\n          />\n        </div>\n        <div class=\"${CSS_CLASSES.SCROLL}\" role=\"listbox\">\n          ${this._isLoading\n            ? this.renderLoadingSpinner()\n            : showNoData\n              ? this.renderNoData()\n              : ''\n          }\n        </div>\n      </div>\n    `;\n  }\n\n  // 부모 클래스의 getThemeClass 메서드를 오버라이드하여 다크 모드 지원\n  protected override getThemeClass(): string {\n    const themeClass = `theme-${this.theme}`;\n    const darkClass = this.dark ? 'dark' : '';\n    return `${themeClass} ${darkClass}`.trim();\n  }\n\n  render() {\n    if (this.multiple) {\n      return this.renderMultiSelectSearch();\n    } else {\n      return this.renderSingleSelectSearch();\n    }\n  }\n\n  private renderMultiSelectSearch() {\n    const texts = this.getLocalizedText();\n    const showResetButton = this.showReset && this._selectedValues.length > 0;\n    const effectiveWidth = this.getEffectiveWidth();\n\n    return html`\n      <div class=\"${CSS_CLASSES.SELECT} ${CSS_CLASSES.MULTI_SELECT} ${this.getThemeClass()} ${this.open ? CSS_CLASSES.OPEN : ''}\" style=\"width: ${effectiveWidth};\">\n        <div class=\"${CSS_CLASSES.SELECTED_CONTAINER} ${showResetButton ? CSS_CLASSES.WITH_RESET : ''}\" @click=${this.toggleDropdown}>\n          <div class=\"${CSS_CLASSES.SELECTED_TAGS}\">\n            ${this._selectedValues.map(value => {\n              const option = this._options.find(opt => opt.value === value);\n              const label = option?.textContent || value;\n              return html`\n                <span class=\"${CSS_CLASSES.TAG}\">\n                  ${label}\n                  <button\n                    type=\"button\"\n                    class=\"${CSS_CLASSES.TAG_REMOVE}\"\n                    @click=${(e: Event) => this.removeTag(e, value)}\n                    title=\"${texts.removeTag}\"\n                  >${this.getCloseIcon()}</button>\n                </span>\n              `;\n            })}\n            ${this._selectedValues.length === 0\n              ? html`<span class=\"${CSS_CLASSES.PLACEHOLDER}\">${texts.placeholder}</span>`\n              : ''\n            }\n          </div>\n          ${showResetButton\n            ? html`<button\n                type=\"button\"\n                class=\"${CSS_CLASSES.MULTI_RESET_BUTTON}\"\n                @click=${this.resetToDefault}\n                title=\"${texts.clearAll}\"\n              >${this.getCloseIcon()}</button>`\n            : ''\n          }\n          <span class=\"${CSS_CLASSES.ARROW}\">${this.open ? this.getChevronUpIcon() : this.getChevronDownIcon()}</span>\n        </div>\n        ${this.renderSearchDropdown()}\n      </div>\n    `;\n  }\n\n  private renderSingleSelectSearch() {\n    const texts = this.getLocalizedText();\n    const firstOptionValue = this._options && this._options.length > 0 ? this._options[0].value : null;\n    const showResetButton = this.showReset &&\n                          this._value !== null &&\n                          firstOptionValue !== null &&\n                          this._value !== firstOptionValue;\n    const effectiveWidth = this.getEffectiveWidth();\n\n    return html`\n      <div class=\"${CSS_CLASSES.SELECT} ${this.getThemeClass()} ${this.open ? CSS_CLASSES.OPEN : ''}\" style=\"width: ${effectiveWidth};\">\n        <button type=\"button\" class=\"${CSS_CLASSES.SELECTED} ${showResetButton ? CSS_CLASSES.WITH_RESET : ''}\" @click=${this.toggleDropdown}>\n          ${this._labelText}\n          ${showResetButton\n            ? html`<button\n                type=\"button\"\n                class=\"${CSS_CLASSES.RESET_BUTTON}\"\n                @click=${this.resetToDefault}\n                title=\"${texts.resetToDefault}\"\n              >${this.getCloseIcon()}</button>`\n            : ''\n          }\n          <span class=\"${CSS_CLASSES.ARROW}\">${this.open ? this.getChevronUpIcon() : this.getChevronDownIcon()}</span>\n        </button>\n        ${this.renderSearchDropdown()}\n      </div>\n    `;\n  }\n\n  public override _createVirtualSelect(options: VirtualSelectOption[], container: HTMLDivElement) {\n    const virtual = super._createVirtualSelect(options, container);\n    if (virtual) {\n      (virtual as any).isitSearch = true;\n    }\n    return virtual;\n  }\n\n  // 가상 스크롤 초기화 - 부모 클래스 메서드 오버라이드하여 검색 처리 추가\n  protected override initializeVirtualSelect(): void {\n    const scrollEl = this.querySelector(`.${CSS_CLASSES.SCROLL}`) as HTMLDivElement;\n    const optionData = this.getAllOptionData();\n\n    // 다중선택에서 모든 항목이 선택된 경우 가상 스크롤 생성하지 않음\n    if (this.multiple && optionData.length === 0) {\n      return;\n    }\n\n    if (!this._virtual && scrollEl && !this._isLoading && optionData.length > 0) {\n      this._virtual = this._createVirtualSelect(optionData, scrollEl);\n\n      // 검색 텍스트가 있으면 필터 적용\n      if (this._searchText) {\n        this._applyFilteredOptions();\n      }\n\n      if (this.multiple) {\n        requestAnimationFrame(() => {\n          this._virtual?.setActiveIndex(0);\n        });\n      } else {\n        const selectedIndex = optionData.findIndex((opt) => opt.value === this._value);\n        requestAnimationFrame(() => {\n          this._virtual?.setActiveIndex(selectedIndex >= 0 ? selectedIndex : 0);\n        });\n      }\n    }\n  }\n\n  private _handleSearchInput = (e: Event): void => {\n    const input = e.target as HTMLInputElement;\n    const previousSearchText = this._searchText;\n    this._searchText = input.value;\n\n    // 검색 텍스트 변경 이벤트 발생\n    if (previousSearchText !== this._searchText) {\n      this.dispatchEvent(new CustomEvent('search-text-change', {\n        detail: { searchText: this._searchText, previousSearchText },\n        bubbles: true,\n        composed: true\n      }));\n    }\n  };\n\n  // null을 undefined로 변환하는 헬퍼 함수\n  private getCurrentValue(): string | undefined {\n    return this.value ?? undefined;\n  }\n\n  // 향상된 다국어 검색 필터 적용\n  private _applyFilteredOptions(): void {\n    if (!this._virtual) return;\n\n    const searchTexts = this.getSearchLocalizedText();\n    const rawInput = this._searchText.trim();\n    \n    if (!rawInput) {\n      const allOptions = this.getAllOptionData();\n      this._virtual.setData(allOptions, this.multiple ? undefined : this.getCurrentValue());\n      this._noMatchVisible = false;\n\n      // 검색 필터 이벤트 발생\n      this.dispatchEvent(new CustomEvent('search-filter', {\n        detail: { filteredOptions: allOptions, searchText: rawInput },\n        bubbles: true,\n        composed: true\n      }));\n      return;\n    }\n\n    const allOptions: OptionItem[] = this.getAllOptionData();\n    \n    // 향상된 다국어 검색 적용\n    const filtered = allOptions.filter(opt => {\n      const label = (opt.label ?? '').toString();\n      return isMultilingualMatch(rawInput, label);\n    });\n\n    if (filtered.length === 0) {\n      const noMatchOption = [{ value: 'no_match', label: searchTexts.noMatchText, disabled: true }];\n      this._virtual.setData(\n        noMatchOption,\n        this.multiple ? undefined : this.getCurrentValue(),\n      );\n\n      // 검색 필터 이벤트 발생 (결과 없음)\n      this.dispatchEvent(new CustomEvent('search-filter', {\n        detail: { filteredOptions: [], searchText: rawInput, hasResults: false },\n        bubbles: true,\n        composed: true\n      }));\n      return;\n    }\n\n    this._virtual.setData(filtered, this.multiple ? undefined : this.getCurrentValue());\n\n    // 검색 필터 이벤트 발생\n    this.dispatchEvent(new CustomEvent('search-filter', {\n      detail: { filteredOptions: filtered, searchText: rawInput, hasResults: true },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  // 부모 클래스의 removeTag 메서드를 오버라이드하여 검색 기능 추가 및 표준 이벤트 사용\n  public override removeTag = (e: Event, valueToRemove: string): void => {\n    e.stopPropagation();\n    this._selectedValues = this._selectedValues.filter(value => value !== valueToRemove);\n    this.updateFormValue();\n\n    const option = this._optionsCache.get(valueToRemove) || this._options.find(opt => opt.value === valueToRemove);\n\n    if (this.open) {\n      this._virtual?.destroy();\n      this._virtual = null;\n\n      // 선택 해제 후 옵션이 있으면 가상 스크롤 재생성\n      const optionData = this.getAllOptionData();\n      if (optionData.length > 0) {\n        const scrollEl = this.querySelector(`.${CSS_CLASSES.SCROLL}`) as HTMLDivElement;\n        if (scrollEl) {\n          this._virtual = this._createVirtualSelect(optionData, scrollEl);\n          if (this._searchText) {\n            this._applyFilteredOptions();\n          }\n          requestAnimationFrame(() => {\n            this._virtual?.setActiveIndex(0);\n          });\n        }\n      }\n    }\n\n    // 표준 이벤트 발생\n    triggerDeselectEvent(this, option?.textContent || '', valueToRemove);\n\n    this._debouncedUpdate();\n  };\n\n  // 부모 클래스의 resetToDefault 메서드를 오버라이드하여 검색 기능 추가 및 표준 이벤트 사용\n  public override resetToDefault = (e: Event): void => {\n    e.stopPropagation();\n\n    if (this.multiple) {\n      this._selectedValues = [];\n      this.updateFormValue();\n\n      if (this.open) {\n        this._virtual?.destroy();\n        this._virtual = null;\n\n        // 리셋 후 모든 옵션이 다시 사용 가능하므로 가상 스크롤 재생성\n        const scrollEl = this.querySelector(`.${CSS_CLASSES.SCROLL}`) as HTMLDivElement;\n        if (scrollEl) {\n          const optionData = this.getAllOptionData();\n          this._virtual = this._createVirtualSelect(optionData, scrollEl);\n          if (this._searchText) {\n            this._applyFilteredOptions();\n          }\n          requestAnimationFrame(() => {\n            this._virtual?.setActiveIndex(0);\n          });\n        }\n      } else {\n        this._pendingActiveIndex = 0;\n      }\n\n      // 표준 이벤트 발생\n      triggerResetEvent(this, { values: [], labels: [] });\n    } else {\n      if (this._options.length > 0) {\n        const firstOption = this._options[0];\n        this.value = firstOption.value;\n        this._labelText = firstOption.textContent || '';\n\n        // 드롭다운이 열려있는 경우 즉시 activeIndex와 focusedIndex를 첫 번째로 설정\n        if (this.open && this._virtual) {\n          requestAnimationFrame(() => {\n            this._virtual?.setActiveIndex(0);\n            // 가상 스크롤의 내부 상태도 첫 번째 옵션으로 설정\n            if (this._virtual) {\n              this._virtual.setActiveAndFocusedIndex(0);\n              this._virtual.applyHighlight();\n            }\n          });\n        } else {\n          this._pendingActiveIndex = 0;\n          \n          if (this._virtual) {\n            this._virtual.destroy();\n            this._virtual = null;\n          }\n        }\n\n        // 표준 이벤트 발생\n        triggerResetEvent(this, { value: firstOption.value, label: firstOption.textContent || '' });\n      }\n    }\n    \n    this._debouncedUpdate();\n  };\n\n  // 드롭다운 열기 메서드 오버라이드 - 표준 이벤트 사용\n  public override openDropdown(): void {\n    // 표준 이벤트 발생\n    triggerOpenEvent(this);\n    this.open = true;\n    this._debouncedUpdate();\n\n    if (this.hasNoOptions()) {\n      this._isLoading = true;\n      this._debouncedUpdate();\n\n      this.loadOptionsAsync().then(() => {\n        this.initializeVirtualSelect();\n      }).catch(() => {\n        this._isLoading = false;\n        this._debouncedUpdate();\n      });\n    } else {\n      this.initializeVirtualSelect();\n    }\n  }\n\n  // 옵션 선택 메서드 오버라이드 - 표준 이벤트 사용\n  public override selectOption(value: string, label: string): void {\n    if (this.multiple) {\n      this._selectedValues = [...this._selectedValues, value];\n      this.updateFormValue();\n      this._debouncedUpdate();\n\n      this._virtual?.destroy();\n      this._virtual = null;\n\n      const scrollEl = this.querySelector(`.${CSS_CLASSES.SCROLL}`) as HTMLDivElement;\n      if (scrollEl) {\n        const optionData = this.getAllOptionData();\n        if (optionData.length > 0) {\n          this._virtual = this._createVirtualSelect(optionData, scrollEl);\n          if (this._searchText) {\n            this._applyFilteredOptions();\n          }\n          requestAnimationFrame(() => {\n            this._virtual?.setActiveIndex(0);\n          });\n        }\n      }\n\n      // 표준 이벤트 발생\n      triggerSelectEvent(this, label, value);\n\n    } else {\n      this._labelText = label;\n      this._setValue(value);\n      this.closeDropdown();\n\n      // 표준 이벤트 발생\n      triggerSelectEvent(this, label, value);\n    }\n  }\n\n  // 값 설정 메서드 오버라이드 - 표준 이벤트 사용\n  public override _setValue(newVal: string, emit: boolean = true): void {\n    if (this._value === newVal) return;\n\n    this._value = newVal;\n    const matched = this._optionsCache.get(newVal) || this._options.find((opt) => opt.value === newVal);\n    this._labelText = matched?.textContent ?? this._labelText ?? '';\n\n    this._internals.setFormValue(this._value || '');\n\n    const texts = this.getLocalizedText();\n    if (this.required && !this._value) {\n      this._internals.setValidity({ valueMissing: true }, texts.required);\n    } else {\n      this._internals.setValidity({});\n    }\n\n    this._debouncedUpdate();\n    \n    // 표준 이벤트 발생\n    if (emit) triggerChangeEvent(this);\n  }\n\n  public override closeDropdown(): void {\n    super.closeDropdown();\n    this._searchText = '';\n    this._noMatchVisible = false;\n  }\n\n  // 자동 너비 계산 오버라이드 - 검색 입력창 고려\n  public override calculateAutoWidth(): void {\n    // width가 명시적으로 설정되지 않은 경우에만 계산\n    if (this.width || this._options.length === 0) {\n      this._calculatedWidth = null;\n      return;\n    }\n\n    // 모든 옵션 텍스트를 수집\n    const optionTexts = this._options.map(opt => opt.textContent || '');\n    \n    // placeholder 텍스트와 검색 placeholder도 고려\n    const texts = this.getLocalizedText();\n    const searchTexts = this.getSearchLocalizedText();\n    \n    if (this.multiple) {\n      optionTexts.push(texts.placeholder);\n    }\n    optionTexts.push(searchTexts.searchPlaceholder);\n\n    // 현재 요소의 font 스타일을 가져와서 측정\n    const computedStyle = window.getComputedStyle(this);\n    const font = `${computedStyle.fontSize} ${computedStyle.fontFamily}`;\n    \n    // 가장 긴 텍스트의 너비를 계산\n    const maxTextWidth = this.getMaxOptionWidth(optionTexts, font);\n    \n    // 검색 컴포넌트는 추가 여백을 더 많이 필요로 함 (검색 아이콘 + reset 버튼 + 화살표 + 패딩)\n    const additionalSpace = this.multiple ? 140 : 100; // 검색 기능으로 인해 더 넓게\n    const totalWidth = maxTextWidth + additionalSpace;\n    \n    this._calculatedWidth = `${Math.max(totalWidth, 200)}px`; // 검색 컴포넌트는 최소 200px\n  }\n\n  // 부모 클래스의 언어 변경 메서드를 오버라이드하여 검색 관련 UI도 업데이트\n  public override setLanguage(language: SupportedLanguage): void {\n    super.setLanguage(language);\n    // 검색 관련 UI 업데이트를 위해 강제 리렌더링\n    this.requestUpdate();\n  }\n\n  // 검색 관련 커스텀 텍스트 설정 메서드\n  public setSearchTexts(customSearchTexts: Partial<SearchLocalizedTexts>): void {\n    this.searchTexts = { ...this.searchTexts, ...customSearchTexts };\n    this.requestUpdate();\n  }\n\n  // 검색 텍스트 초기화 메서드\n  public clearSearchText(): void {\n    this._searchText = '';\n    this._applyFilteredOptions();\n    this.requestUpdate();\n  }\n\n  // 현재 검색 텍스트 반환\n  public getSearchText(): string {\n    return this._searchText;\n  }\n\n  // 검색 텍스트 설정\n  public setSearchText(searchText: string): void {\n    this._searchText = searchText;\n    this._applyFilteredOptions();\n    this.requestUpdate();\n  }\n\n  // 검색 관련 다국어 텍스트를 반환하는 정적 메서드\n  static getSearchLocalizedTexts(): Record<SupportedLanguage, SearchLocalizedTexts> {\n    return SEARCH_LOCALIZED_TEXTS;\n  }\n\n  // 검색 관련 기본 텍스트 구조를 반환하는 정적 메서드\n  static getDefaultSearchTexts(): Record<SupportedLanguage, SearchLocalizedTexts> {\n    return SEARCH_LOCALIZED_TEXTS;\n  }\n\n  // 디버깅을 위한 검색 테스트 메서드 (개발용)\n  public testMultilingualSearch(searchText: string, targetText: string): boolean {\n    return isMultilingualMatch(searchText, targetText);\n  }\n\n  // 성능 모니터링을 위한 검색 관련 메트릭 (부모 클래스 확장)\n  public override getPerformanceMetrics(): {\n    optionCount: number;\n    cacheSize: number;\n    isUpdating: boolean;\n    hasCalculatedWidth: boolean;\n    searchText: string;\n    hasSearchResults: boolean;\n  } {\n    const baseMetrics = super.getPerformanceMetrics();\n    return {\n      ...baseMetrics,\n      searchText: this._searchText,\n      hasSearchResults: this._searchText ? this.getAllOptionData().length > 0 : true\n    };\n  }\n}\n\nif (!customElements.get('seo-select-search')) {\n  customElements.define('seo-select-search', SeoSelectSearch);\n}"],"names":["HIRAGANA_TO_KATAKANA","KATAKANA_TO_HIRAGANA","hiragana","katakana","ROMAJI_TO_HIRAGANA","SIMPLIFIED_TO_TRADITIONAL","TRADITIONAL_TO_SIMPLIFIED","simplified","traditional","CHINESE_TO_PINYIN","getKoreanChosung","str","CHOSUNG_LIST","CHOSUNG_UNICODE","ch","result","char","code","offset","chosungIndex","normalizeJapanese","normalizeChinese","romajiToHiragana","romaji","i","found","len","substr","chineseToPinyin","detectLanguage","koreanCount","japaneseCount","chineseCount","englishCount","total","getChosungAll","cleanStr","createMultilingualSearchPattern","searchText","normalizedSearch","language","patterns","basicPattern","hiraganaFromRomaji","katakanaFromRomaji","isMultilingualMatch","targetText","normalizedTarget","pattern","pinyinTarget","hiraganaTarget","SeoSelectSearch","SeoSelect","e","input","previousSearchText","valueToRemove","value","option","opt","optionData","scrollEl","CSS_CLASSES","triggerDeselectEvent","triggerResetEvent","firstOption","type","listener","options","handler","EVENT_NAMES","event","SEARCH_LOCALIZED_TEXTS","changed","ICONS","searchTexts","hasOptions","showNoData","effectiveWidth","html","themeClass","darkClass","texts","showResetButton","label","firstOptionValue","container","virtual","selectedIndex","rawInput","allOptions","filtered","noMatchOption","triggerOpenEvent","triggerSelectEvent","newVal","emit","matched","optionTexts","computedStyle","font","maxTextWidth","additionalSpace","totalWidth","customSearchTexts"],"mappings":"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"}